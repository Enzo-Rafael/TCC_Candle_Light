//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/Scriptis/ImputSystem/PlayersImputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Scriptis/ImputSystem/PlayersImputMap.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayersImputMap: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayersImputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayersImputMap"",
    ""maps"": [
        {
            ""name"": ""Player1Muve"",
            ""id"": ""2a7db825-d0b2-4f2a-b1d6-e0acc4a7a319"",
            ""actions"": [
                {
                    ""name"": ""MuveImput"",
                    ""type"": ""Value"",
                    ""id"": ""01f684e2-3a81-4f0d-a104-0d02fff954d6"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ActionInput"",
                    ""type"": ""Value"",
                    ""id"": ""94e0f2a6-eaa4-4a25-8666-9f2b619e66d5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""820ac937-b1a1-4495-932b-2660ef82df20"",
                    ""path"": ""3DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""d96e962b-bed8-4492-b788-1c23597bfcfd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""e9876f37-5732-4fb1-817f-ed8571fac1c4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""291b7a63-3900-493b-9b04-54363ebdf5cf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""92d20c54-d02f-48ba-a89a-796f9ead175d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Forward"",
                    ""id"": ""7dbea21c-3b05-45be-8c95-18fcf7c69fee"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Backward"",
                    ""id"": ""b4312bdb-79c7-407d-830d-2f0378392276"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""493daf9b-f7aa-4b5f-a70c-8385ce12f25f"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""8c639017-3376-49dc-ae7a-068a39d6aeaf"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""3422171c-aa12-4dd5-9fc6-ed1a1e621581"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""3a26c023-41c9-42f4-bd15-edabe54e8afc"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""5f501920-4cb2-4e9c-9a29-ff295bbe77d9"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Forward"",
                    ""id"": ""8f7a9a2b-ee25-4a90-ba7b-c5d8521c218f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Backward"",
                    ""id"": ""fc826b4b-c526-48d0-88ff-ef12bccb9abb"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c91bebcc-8764-4e60-9387-5961d4e19462"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player2Muve"",
            ""id"": ""42ad252d-9f22-4616-a64d-47dcafee263c"",
            ""actions"": [
                {
                    ""name"": ""MuveImput"",
                    ""type"": ""Value"",
                    ""id"": ""7e704e03-cc5b-4ccc-8662-84af1d2f49dd"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ActionInput"",
                    ""type"": ""Value"",
                    ""id"": ""d904301f-7bf8-48b0-a6c1-61bc78bf4971"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""ce660c9b-346a-4723-98d8-b7212246267e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Direconals"",
                    ""id"": ""61e0718b-b404-422d-b4df-4f1aea69e2b3"",
                    ""path"": ""3DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""08039552-a174-473b-aa98-8a69f97e8469"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""2d9f7b7b-f4d1-4c84-ba67-fa2f1e53e564"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""fe75a210-4163-4e6d-8973-534b7c5298cc"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""13163d23-b9d9-4026-8dd2-d6af5c8ec273"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Forward"",
                    ""id"": ""736eb174-2ae7-4a84-8e52-95ce711bb656"",
                    ""path"": ""<Keyboard>/numpad1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Backward"",
                    ""id"": ""43d9f6b2-723e-4cd4-8d60-e573f5e5ccc5"",
                    ""path"": ""<Keyboard>/numpad2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""8176a7e7-af85-4f1a-b82a-aac31b5c18a9"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""ce917df5-eb5b-48de-8248-6d2ac4a912fa"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""cfd086c8-a7e7-476b-9737-b0e2260763d2"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""beb3ea78-10eb-4463-9618-fd471cbe24f7"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""fadcab38-e41b-46b6-af3c-1e404af0eefd"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Forward"",
                    ""id"": ""1a5b43f1-4340-4d21-bd48-9344e8188f50"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Backward"",
                    ""id"": ""c731563f-2e5e-40aa-988b-d31009fee384"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MuveImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""68af8c6f-3173-4e93-8d0e-a0e517947883"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d750bc5-d125-4d04-b5ae-79525352ea1b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI Imputs"",
            ""id"": ""c54e27f8-16d5-4604-9f47-f9971d3e9449"",
            ""actions"": [
                {
                    ""name"": ""MenuImput"",
                    ""type"": ""Button"",
                    ""id"": ""321f2365-fc4f-4df6-b4b3-542f84bb047d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2de23ff5-c859-4f1c-bbe3-c4cd055b9097"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuImput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player1Muve
        m_Player1Muve = asset.FindActionMap("Player1Muve", throwIfNotFound: true);
        m_Player1Muve_MuveImput = m_Player1Muve.FindAction("MuveImput", throwIfNotFound: true);
        m_Player1Muve_ActionInput = m_Player1Muve.FindAction("ActionInput", throwIfNotFound: true);
        // Player2Muve
        m_Player2Muve = asset.FindActionMap("Player2Muve", throwIfNotFound: true);
        m_Player2Muve_MuveImput = m_Player2Muve.FindAction("MuveImput", throwIfNotFound: true);
        m_Player2Muve_ActionInput = m_Player2Muve.FindAction("ActionInput", throwIfNotFound: true);
        m_Player2Muve_Mouse = m_Player2Muve.FindAction("Mouse", throwIfNotFound: true);
        // UI Imputs
        m_UIImputs = asset.FindActionMap("UI Imputs", throwIfNotFound: true);
        m_UIImputs_MenuImput = m_UIImputs.FindAction("MenuImput", throwIfNotFound: true);
    }

    ~@PlayersImputMap()
    {
        UnityEngine.Debug.Assert(!m_Player1Muve.enabled, "This will cause a leak and performance issues, PlayersImputMap.Player1Muve.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Player2Muve.enabled, "This will cause a leak and performance issues, PlayersImputMap.Player2Muve.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UIImputs.enabled, "This will cause a leak and performance issues, PlayersImputMap.UIImputs.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player1Muve
    private readonly InputActionMap m_Player1Muve;
    private List<IPlayer1MuveActions> m_Player1MuveActionsCallbackInterfaces = new List<IPlayer1MuveActions>();
    private readonly InputAction m_Player1Muve_MuveImput;
    private readonly InputAction m_Player1Muve_ActionInput;
    /// <summary>
    /// Provides access to input actions defined in input action map "Player1Muve".
    /// </summary>
    public struct Player1MuveActions
    {
        private @PlayersImputMap m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Player1MuveActions(@PlayersImputMap wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Player1Muve/MuveImput".
        /// </summary>
        public InputAction @MuveImput => m_Wrapper.m_Player1Muve_MuveImput;
        /// <summary>
        /// Provides access to the underlying input action "Player1Muve/ActionInput".
        /// </summary>
        public InputAction @ActionInput => m_Wrapper.m_Player1Muve_ActionInput;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Player1Muve; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Player1MuveActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Player1MuveActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Player1MuveActions" />
        public void AddCallbacks(IPlayer1MuveActions instance)
        {
            if (instance == null || m_Wrapper.m_Player1MuveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player1MuveActionsCallbackInterfaces.Add(instance);
            @MuveImput.started += instance.OnMuveImput;
            @MuveImput.performed += instance.OnMuveImput;
            @MuveImput.canceled += instance.OnMuveImput;
            @ActionInput.started += instance.OnActionInput;
            @ActionInput.performed += instance.OnActionInput;
            @ActionInput.canceled += instance.OnActionInput;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Player1MuveActions" />
        private void UnregisterCallbacks(IPlayer1MuveActions instance)
        {
            @MuveImput.started -= instance.OnMuveImput;
            @MuveImput.performed -= instance.OnMuveImput;
            @MuveImput.canceled -= instance.OnMuveImput;
            @ActionInput.started -= instance.OnActionInput;
            @ActionInput.performed -= instance.OnActionInput;
            @ActionInput.canceled -= instance.OnActionInput;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Player1MuveActions.UnregisterCallbacks(IPlayer1MuveActions)" />.
        /// </summary>
        /// <seealso cref="Player1MuveActions.UnregisterCallbacks(IPlayer1MuveActions)" />
        public void RemoveCallbacks(IPlayer1MuveActions instance)
        {
            if (m_Wrapper.m_Player1MuveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Player1MuveActions.AddCallbacks(IPlayer1MuveActions)" />
        /// <seealso cref="Player1MuveActions.RemoveCallbacks(IPlayer1MuveActions)" />
        /// <seealso cref="Player1MuveActions.UnregisterCallbacks(IPlayer1MuveActions)" />
        public void SetCallbacks(IPlayer1MuveActions instance)
        {
            foreach (var item in m_Wrapper.m_Player1MuveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player1MuveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Player1MuveActions" /> instance referencing this action map.
    /// </summary>
    public Player1MuveActions @Player1Muve => new Player1MuveActions(this);

    // Player2Muve
    private readonly InputActionMap m_Player2Muve;
    private List<IPlayer2MuveActions> m_Player2MuveActionsCallbackInterfaces = new List<IPlayer2MuveActions>();
    private readonly InputAction m_Player2Muve_MuveImput;
    private readonly InputAction m_Player2Muve_ActionInput;
    private readonly InputAction m_Player2Muve_Mouse;
    /// <summary>
    /// Provides access to input actions defined in input action map "Player2Muve".
    /// </summary>
    public struct Player2MuveActions
    {
        private @PlayersImputMap m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Player2MuveActions(@PlayersImputMap wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Player2Muve/MuveImput".
        /// </summary>
        public InputAction @MuveImput => m_Wrapper.m_Player2Muve_MuveImput;
        /// <summary>
        /// Provides access to the underlying input action "Player2Muve/ActionInput".
        /// </summary>
        public InputAction @ActionInput => m_Wrapper.m_Player2Muve_ActionInput;
        /// <summary>
        /// Provides access to the underlying input action "Player2Muve/Mouse".
        /// </summary>
        public InputAction @Mouse => m_Wrapper.m_Player2Muve_Mouse;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Player2Muve; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Player2MuveActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Player2MuveActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Player2MuveActions" />
        public void AddCallbacks(IPlayer2MuveActions instance)
        {
            if (instance == null || m_Wrapper.m_Player2MuveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player2MuveActionsCallbackInterfaces.Add(instance);
            @MuveImput.started += instance.OnMuveImput;
            @MuveImput.performed += instance.OnMuveImput;
            @MuveImput.canceled += instance.OnMuveImput;
            @ActionInput.started += instance.OnActionInput;
            @ActionInput.performed += instance.OnActionInput;
            @ActionInput.canceled += instance.OnActionInput;
            @Mouse.started += instance.OnMouse;
            @Mouse.performed += instance.OnMouse;
            @Mouse.canceled += instance.OnMouse;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Player2MuveActions" />
        private void UnregisterCallbacks(IPlayer2MuveActions instance)
        {
            @MuveImput.started -= instance.OnMuveImput;
            @MuveImput.performed -= instance.OnMuveImput;
            @MuveImput.canceled -= instance.OnMuveImput;
            @ActionInput.started -= instance.OnActionInput;
            @ActionInput.performed -= instance.OnActionInput;
            @ActionInput.canceled -= instance.OnActionInput;
            @Mouse.started -= instance.OnMouse;
            @Mouse.performed -= instance.OnMouse;
            @Mouse.canceled -= instance.OnMouse;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Player2MuveActions.UnregisterCallbacks(IPlayer2MuveActions)" />.
        /// </summary>
        /// <seealso cref="Player2MuveActions.UnregisterCallbacks(IPlayer2MuveActions)" />
        public void RemoveCallbacks(IPlayer2MuveActions instance)
        {
            if (m_Wrapper.m_Player2MuveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Player2MuveActions.AddCallbacks(IPlayer2MuveActions)" />
        /// <seealso cref="Player2MuveActions.RemoveCallbacks(IPlayer2MuveActions)" />
        /// <seealso cref="Player2MuveActions.UnregisterCallbacks(IPlayer2MuveActions)" />
        public void SetCallbacks(IPlayer2MuveActions instance)
        {
            foreach (var item in m_Wrapper.m_Player2MuveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player2MuveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Player2MuveActions" /> instance referencing this action map.
    /// </summary>
    public Player2MuveActions @Player2Muve => new Player2MuveActions(this);

    // UI Imputs
    private readonly InputActionMap m_UIImputs;
    private List<IUIImputsActions> m_UIImputsActionsCallbackInterfaces = new List<IUIImputsActions>();
    private readonly InputAction m_UIImputs_MenuImput;
    /// <summary>
    /// Provides access to input actions defined in input action map "UI Imputs".
    /// </summary>
    public struct UIImputsActions
    {
        private @PlayersImputMap m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public UIImputsActions(@PlayersImputMap wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "UIImputs/MenuImput".
        /// </summary>
        public InputAction @MenuImput => m_Wrapper.m_UIImputs_MenuImput;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_UIImputs; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="UIImputsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(UIImputsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="UIImputsActions" />
        public void AddCallbacks(IUIImputsActions instance)
        {
            if (instance == null || m_Wrapper.m_UIImputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIImputsActionsCallbackInterfaces.Add(instance);
            @MenuImput.started += instance.OnMenuImput;
            @MenuImput.performed += instance.OnMenuImput;
            @MenuImput.canceled += instance.OnMenuImput;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="UIImputsActions" />
        private void UnregisterCallbacks(IUIImputsActions instance)
        {
            @MenuImput.started -= instance.OnMenuImput;
            @MenuImput.performed -= instance.OnMenuImput;
            @MenuImput.canceled -= instance.OnMenuImput;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="UIImputsActions.UnregisterCallbacks(IUIImputsActions)" />.
        /// </summary>
        /// <seealso cref="UIImputsActions.UnregisterCallbacks(IUIImputsActions)" />
        public void RemoveCallbacks(IUIImputsActions instance)
        {
            if (m_Wrapper.m_UIImputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="UIImputsActions.AddCallbacks(IUIImputsActions)" />
        /// <seealso cref="UIImputsActions.RemoveCallbacks(IUIImputsActions)" />
        /// <seealso cref="UIImputsActions.UnregisterCallbacks(IUIImputsActions)" />
        public void SetCallbacks(IUIImputsActions instance)
        {
            foreach (var item in m_Wrapper.m_UIImputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIImputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="UIImputsActions" /> instance referencing this action map.
    /// </summary>
    public UIImputsActions @UIImputs => new UIImputsActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Player1Muve" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Player1MuveActions.AddCallbacks(IPlayer1MuveActions)" />
    /// <seealso cref="Player1MuveActions.RemoveCallbacks(IPlayer1MuveActions)" />
    public interface IPlayer1MuveActions
    {
        /// <summary>
        /// Method invoked when associated input action "MuveImput" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMuveImput(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ActionInput" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnActionInput(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Player2Muve" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Player2MuveActions.AddCallbacks(IPlayer2MuveActions)" />
    /// <seealso cref="Player2MuveActions.RemoveCallbacks(IPlayer2MuveActions)" />
    public interface IPlayer2MuveActions
    {
        /// <summary>
        /// Method invoked when associated input action "MuveImput" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMuveImput(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ActionInput" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnActionInput(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Mouse" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMouse(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "UI Imputs" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="UIImputsActions.AddCallbacks(IUIImputsActions)" />
    /// <seealso cref="UIImputsActions.RemoveCallbacks(IUIImputsActions)" />
    public interface IUIImputsActions
    {
        /// <summary>
        /// Method invoked when associated input action "MenuImput" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMenuImput(InputAction.CallbackContext context);
    }
}
