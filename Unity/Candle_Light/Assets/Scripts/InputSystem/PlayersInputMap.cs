//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.1
//     from Assets/Scripts/InputSystem/PlayersInputMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Scripts/InputSystem/PlayersInputMap.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayersInputMap: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayersInputMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayersInputMap"",
    ""maps"": [
        {
            ""name"": ""Player1Move"",
            ""id"": ""2a7db825-d0b2-4f2a-b1d6-e0acc4a7a319"",
            ""actions"": [
                {
                    ""name"": ""MoveInputOne"",
                    ""type"": ""Value"",
                    ""id"": ""01f684e2-3a81-4f0d-a104-0d02fff954d6"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ActionInputOne"",
                    ""type"": ""Button"",
                    ""id"": ""94e0f2a6-eaa4-4a25-8666-9f2b619e66d5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangeCamLeft"",
                    ""type"": ""Button"",
                    ""id"": ""3838a966-135f-4a5d-8bbb-da515a5e22a4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeCamRight"",
                    ""type"": ""Button"",
                    ""id"": ""0013c44a-da7f-45a8-ac7e-d473212e9eab"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""820ac937-b1a1-4495-932b-2660ef82df20"",
                    ""path"": ""3DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInputOne"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""d96e962b-bed8-4492-b788-1c23597bfcfd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInputOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""e9876f37-5732-4fb1-817f-ed8571fac1c4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInputOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""291b7a63-3900-493b-9b04-54363ebdf5cf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInputOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""92d20c54-d02f-48ba-a89a-796f9ead175d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInputOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""42ea2c2b-3387-4357-b83c-1a3098fcf87e"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionInputOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cd7804f7-d79b-4f00-9028-a21325c78893"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionInputOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35151bd2-72b6-435b-9617-498aef4ab244"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeCamLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9dd8812-c9e1-44fe-98a7-6fff1f02a7eb"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeCamRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player2Move"",
            ""id"": ""42ad252d-9f22-4616-a64d-47dcafee263c"",
            ""actions"": [
                {
                    ""name"": ""MoveInputTwo"",
                    ""type"": ""Value"",
                    ""id"": ""7e704e03-cc5b-4ccc-8662-84af1d2f49dd"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ActionInputTwo"",
                    ""type"": ""Button"",
                    ""id"": ""d904301f-7bf8-48b0-a6c1-61bc78bf4971"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""Value"",
                    ""id"": ""ce660c9b-346a-4723-98d8-b7212246267e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""VooFantasma"",
                    ""type"": ""Value"",
                    ""id"": ""e4e9aab5-97e9-4098-9b06-043175d7cb0b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GhostShow"",
                    ""type"": ""Button"",
                    ""id"": ""d96d73bc-69e9-47c7-9195-f5b33a6f1d9a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Direconals"",
                    ""id"": ""61e0718b-b404-422d-b4df-4f1aea69e2b3"",
                    ""path"": ""3DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInputTwo"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""08039552-a174-473b-aa98-8a69f97e8469"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInputTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""2d9f7b7b-f4d1-4c84-ba67-fa2f1e53e564"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInputTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""fe75a210-4163-4e6d-8973-534b7c5298cc"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInputTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""13163d23-b9d9-4026-8dd2-d6af5c8ec273"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInputTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""68af8c6f-3173-4e93-8d0e-a0e517947883"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActionInputTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d750bc5-d125-4d04-b5ae-79525352ea1b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33ae56a9-ec79-450a-8f90-4b0d2d9d8de3"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VooFantasma"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15f4ae2d-5a0f-41c5-ac9d-e8367748c5f8"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GhostShow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InComumInputs"",
            ""id"": ""c54e27f8-16d5-4604-9f47-f9971d3e9449"",
            ""actions"": [
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""321f2365-fc4f-4df6-b4b3-542f84bb047d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CheatInvulGhost"",
                    ""type"": ""Button"",
                    ""id"": ""214bdd7f-2450-4c05-8262-affbcd609839"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2de23ff5-c859-4f1c-bbe3-c4cd055b9097"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""83675e42-a45e-4ec0-b111-d3c061f6a1fe"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CheatInvulGhost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player1Move
        m_Player1Move = asset.FindActionMap("Player1Move", throwIfNotFound: true);
        m_Player1Move_MoveInputOne = m_Player1Move.FindAction("MoveInputOne", throwIfNotFound: true);
        m_Player1Move_ActionInputOne = m_Player1Move.FindAction("ActionInputOne", throwIfNotFound: true);
        m_Player1Move_ChangeCamLeft = m_Player1Move.FindAction("ChangeCamLeft", throwIfNotFound: true);
        m_Player1Move_ChangeCamRight = m_Player1Move.FindAction("ChangeCamRight", throwIfNotFound: true);
        // Player2Move
        m_Player2Move = asset.FindActionMap("Player2Move", throwIfNotFound: true);
        m_Player2Move_MoveInputTwo = m_Player2Move.FindAction("MoveInputTwo", throwIfNotFound: true);
        m_Player2Move_ActionInputTwo = m_Player2Move.FindAction("ActionInputTwo", throwIfNotFound: true);
        m_Player2Move_Mouse = m_Player2Move.FindAction("Mouse", throwIfNotFound: true);
        m_Player2Move_VooFantasma = m_Player2Move.FindAction("VooFantasma", throwIfNotFound: true);
        m_Player2Move_GhostShow = m_Player2Move.FindAction("GhostShow", throwIfNotFound: true);
        // InComumInputs
        m_InComumInputs = asset.FindActionMap("InComumInputs", throwIfNotFound: true);
        m_InComumInputs_Close = m_InComumInputs.FindAction("Close", throwIfNotFound: true);
        m_InComumInputs_CheatInvulGhost = m_InComumInputs.FindAction("CheatInvulGhost", throwIfNotFound: true);
    }

    ~@PlayersInputMap()
    {
        UnityEngine.Debug.Assert(!m_Player1Move.enabled, "This will cause a leak and performance issues, PlayersInputMap.Player1Move.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Player2Move.enabled, "This will cause a leak and performance issues, PlayersInputMap.Player2Move.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_InComumInputs.enabled, "This will cause a leak and performance issues, PlayersInputMap.InComumInputs.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player1Move
    private readonly InputActionMap m_Player1Move;
    private List<IPlayer1MoveActions> m_Player1MoveActionsCallbackInterfaces = new List<IPlayer1MoveActions>();
    private readonly InputAction m_Player1Move_MoveInputOne;
    private readonly InputAction m_Player1Move_ActionInputOne;
    private readonly InputAction m_Player1Move_ChangeCamLeft;
    private readonly InputAction m_Player1Move_ChangeCamRight;
    /// <summary>
    /// Provides access to input actions defined in input action map "Player1Move".
    /// </summary>
    public struct Player1MoveActions
    {
        private @PlayersInputMap m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Player1MoveActions(@PlayersInputMap wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Player1Move/MoveInputOne".
        /// </summary>
        public InputAction @MoveInputOne => m_Wrapper.m_Player1Move_MoveInputOne;
        /// <summary>
        /// Provides access to the underlying input action "Player1Move/ActionInputOne".
        /// </summary>
        public InputAction @ActionInputOne => m_Wrapper.m_Player1Move_ActionInputOne;
        /// <summary>
        /// Provides access to the underlying input action "Player1Move/ChangeCamLeft".
        /// </summary>
        public InputAction @ChangeCamLeft => m_Wrapper.m_Player1Move_ChangeCamLeft;
        /// <summary>
        /// Provides access to the underlying input action "Player1Move/ChangeCamRight".
        /// </summary>
        public InputAction @ChangeCamRight => m_Wrapper.m_Player1Move_ChangeCamRight;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Player1Move; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Player1MoveActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Player1MoveActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Player1MoveActions" />
        public void AddCallbacks(IPlayer1MoveActions instance)
        {
            if (instance == null || m_Wrapper.m_Player1MoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player1MoveActionsCallbackInterfaces.Add(instance);
            @MoveInputOne.started += instance.OnMoveInputOne;
            @MoveInputOne.performed += instance.OnMoveInputOne;
            @MoveInputOne.canceled += instance.OnMoveInputOne;
            @ActionInputOne.started += instance.OnActionInputOne;
            @ActionInputOne.performed += instance.OnActionInputOne;
            @ActionInputOne.canceled += instance.OnActionInputOne;
            @ChangeCamLeft.started += instance.OnChangeCamLeft;
            @ChangeCamLeft.performed += instance.OnChangeCamLeft;
            @ChangeCamLeft.canceled += instance.OnChangeCamLeft;
            @ChangeCamRight.started += instance.OnChangeCamRight;
            @ChangeCamRight.performed += instance.OnChangeCamRight;
            @ChangeCamRight.canceled += instance.OnChangeCamRight;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Player1MoveActions" />
        private void UnregisterCallbacks(IPlayer1MoveActions instance)
        {
            @MoveInputOne.started -= instance.OnMoveInputOne;
            @MoveInputOne.performed -= instance.OnMoveInputOne;
            @MoveInputOne.canceled -= instance.OnMoveInputOne;
            @ActionInputOne.started -= instance.OnActionInputOne;
            @ActionInputOne.performed -= instance.OnActionInputOne;
            @ActionInputOne.canceled -= instance.OnActionInputOne;
            @ChangeCamLeft.started -= instance.OnChangeCamLeft;
            @ChangeCamLeft.performed -= instance.OnChangeCamLeft;
            @ChangeCamLeft.canceled -= instance.OnChangeCamLeft;
            @ChangeCamRight.started -= instance.OnChangeCamRight;
            @ChangeCamRight.performed -= instance.OnChangeCamRight;
            @ChangeCamRight.canceled -= instance.OnChangeCamRight;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Player1MoveActions.UnregisterCallbacks(IPlayer1MoveActions)" />.
        /// </summary>
        /// <seealso cref="Player1MoveActions.UnregisterCallbacks(IPlayer1MoveActions)" />
        public void RemoveCallbacks(IPlayer1MoveActions instance)
        {
            if (m_Wrapper.m_Player1MoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Player1MoveActions.AddCallbacks(IPlayer1MoveActions)" />
        /// <seealso cref="Player1MoveActions.RemoveCallbacks(IPlayer1MoveActions)" />
        /// <seealso cref="Player1MoveActions.UnregisterCallbacks(IPlayer1MoveActions)" />
        public void SetCallbacks(IPlayer1MoveActions instance)
        {
            foreach (var item in m_Wrapper.m_Player1MoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player1MoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Player1MoveActions" /> instance referencing this action map.
    /// </summary>
    public Player1MoveActions @Player1Move => new Player1MoveActions(this);

    // Player2Move
    private readonly InputActionMap m_Player2Move;
    private List<IPlayer2MoveActions> m_Player2MoveActionsCallbackInterfaces = new List<IPlayer2MoveActions>();
    private readonly InputAction m_Player2Move_MoveInputTwo;
    private readonly InputAction m_Player2Move_ActionInputTwo;
    private readonly InputAction m_Player2Move_Mouse;
    private readonly InputAction m_Player2Move_VooFantasma;
    private readonly InputAction m_Player2Move_GhostShow;
    /// <summary>
    /// Provides access to input actions defined in input action map "Player2Move".
    /// </summary>
    public struct Player2MoveActions
    {
        private @PlayersInputMap m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Player2MoveActions(@PlayersInputMap wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "Player2Move/MoveInputTwo".
        /// </summary>
        public InputAction @MoveInputTwo => m_Wrapper.m_Player2Move_MoveInputTwo;
        /// <summary>
        /// Provides access to the underlying input action "Player2Move/ActionInputTwo".
        /// </summary>
        public InputAction @ActionInputTwo => m_Wrapper.m_Player2Move_ActionInputTwo;
        /// <summary>
        /// Provides access to the underlying input action "Player2Move/Mouse".
        /// </summary>
        public InputAction @Mouse => m_Wrapper.m_Player2Move_Mouse;
        /// <summary>
        /// Provides access to the underlying input action "Player2Move/VooFantasma".
        /// </summary>
        public InputAction @VooFantasma => m_Wrapper.m_Player2Move_VooFantasma;
        /// <summary>
        /// Provides access to the underlying input action "Player2Move/GhostShow".
        /// </summary>
        public InputAction @GhostShow => m_Wrapper.m_Player2Move_GhostShow;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_Player2Move; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Player2MoveActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Player2MoveActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Player2MoveActions" />
        public void AddCallbacks(IPlayer2MoveActions instance)
        {
            if (instance == null || m_Wrapper.m_Player2MoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player2MoveActionsCallbackInterfaces.Add(instance);
            @MoveInputTwo.started += instance.OnMoveInputTwo;
            @MoveInputTwo.performed += instance.OnMoveInputTwo;
            @MoveInputTwo.canceled += instance.OnMoveInputTwo;
            @ActionInputTwo.started += instance.OnActionInputTwo;
            @ActionInputTwo.performed += instance.OnActionInputTwo;
            @ActionInputTwo.canceled += instance.OnActionInputTwo;
            @Mouse.started += instance.OnMouse;
            @Mouse.performed += instance.OnMouse;
            @Mouse.canceled += instance.OnMouse;
            @VooFantasma.started += instance.OnVooFantasma;
            @VooFantasma.performed += instance.OnVooFantasma;
            @VooFantasma.canceled += instance.OnVooFantasma;
            @GhostShow.started += instance.OnGhostShow;
            @GhostShow.performed += instance.OnGhostShow;
            @GhostShow.canceled += instance.OnGhostShow;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Player2MoveActions" />
        private void UnregisterCallbacks(IPlayer2MoveActions instance)
        {
            @MoveInputTwo.started -= instance.OnMoveInputTwo;
            @MoveInputTwo.performed -= instance.OnMoveInputTwo;
            @MoveInputTwo.canceled -= instance.OnMoveInputTwo;
            @ActionInputTwo.started -= instance.OnActionInputTwo;
            @ActionInputTwo.performed -= instance.OnActionInputTwo;
            @ActionInputTwo.canceled -= instance.OnActionInputTwo;
            @Mouse.started -= instance.OnMouse;
            @Mouse.performed -= instance.OnMouse;
            @Mouse.canceled -= instance.OnMouse;
            @VooFantasma.started -= instance.OnVooFantasma;
            @VooFantasma.performed -= instance.OnVooFantasma;
            @VooFantasma.canceled -= instance.OnVooFantasma;
            @GhostShow.started -= instance.OnGhostShow;
            @GhostShow.performed -= instance.OnGhostShow;
            @GhostShow.canceled -= instance.OnGhostShow;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Player2MoveActions.UnregisterCallbacks(IPlayer2MoveActions)" />.
        /// </summary>
        /// <seealso cref="Player2MoveActions.UnregisterCallbacks(IPlayer2MoveActions)" />
        public void RemoveCallbacks(IPlayer2MoveActions instance)
        {
            if (m_Wrapper.m_Player2MoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Player2MoveActions.AddCallbacks(IPlayer2MoveActions)" />
        /// <seealso cref="Player2MoveActions.RemoveCallbacks(IPlayer2MoveActions)" />
        /// <seealso cref="Player2MoveActions.UnregisterCallbacks(IPlayer2MoveActions)" />
        public void SetCallbacks(IPlayer2MoveActions instance)
        {
            foreach (var item in m_Wrapper.m_Player2MoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player2MoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Player2MoveActions" /> instance referencing this action map.
    /// </summary>
    public Player2MoveActions @Player2Move => new Player2MoveActions(this);

    // InComumInputs
    private readonly InputActionMap m_InComumInputs;
    private List<IInComumInputsActions> m_InComumInputsActionsCallbackInterfaces = new List<IInComumInputsActions>();
    private readonly InputAction m_InComumInputs_Close;
    private readonly InputAction m_InComumInputs_CheatInvulGhost;
    /// <summary>
    /// Provides access to input actions defined in input action map "InComumInputs".
    /// </summary>
    public struct InComumInputsActions
    {
        private @PlayersInputMap m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public InComumInputsActions(@PlayersInputMap wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "InComumInputs/Close".
        /// </summary>
        public InputAction @Close => m_Wrapper.m_InComumInputs_Close;
        /// <summary>
        /// Provides access to the underlying input action "InComumInputs/CheatInvulGhost".
        /// </summary>
        public InputAction @CheatInvulGhost => m_Wrapper.m_InComumInputs_CheatInvulGhost;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_InComumInputs; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="InComumInputsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(InComumInputsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="InComumInputsActions" />
        public void AddCallbacks(IInComumInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_InComumInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InComumInputsActionsCallbackInterfaces.Add(instance);
            @Close.started += instance.OnClose;
            @Close.performed += instance.OnClose;
            @Close.canceled += instance.OnClose;
            @CheatInvulGhost.started += instance.OnCheatInvulGhost;
            @CheatInvulGhost.performed += instance.OnCheatInvulGhost;
            @CheatInvulGhost.canceled += instance.OnCheatInvulGhost;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="InComumInputsActions" />
        private void UnregisterCallbacks(IInComumInputsActions instance)
        {
            @Close.started -= instance.OnClose;
            @Close.performed -= instance.OnClose;
            @Close.canceled -= instance.OnClose;
            @CheatInvulGhost.started -= instance.OnCheatInvulGhost;
            @CheatInvulGhost.performed -= instance.OnCheatInvulGhost;
            @CheatInvulGhost.canceled -= instance.OnCheatInvulGhost;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="InComumInputsActions.UnregisterCallbacks(IInComumInputsActions)" />.
        /// </summary>
        /// <seealso cref="InComumInputsActions.UnregisterCallbacks(IInComumInputsActions)" />
        public void RemoveCallbacks(IInComumInputsActions instance)
        {
            if (m_Wrapper.m_InComumInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="InComumInputsActions.AddCallbacks(IInComumInputsActions)" />
        /// <seealso cref="InComumInputsActions.RemoveCallbacks(IInComumInputsActions)" />
        /// <seealso cref="InComumInputsActions.UnregisterCallbacks(IInComumInputsActions)" />
        public void SetCallbacks(IInComumInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_InComumInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InComumInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="InComumInputsActions" /> instance referencing this action map.
    /// </summary>
    public InComumInputsActions @InComumInputs => new InComumInputsActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Player1Move" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Player1MoveActions.AddCallbacks(IPlayer1MoveActions)" />
    /// <seealso cref="Player1MoveActions.RemoveCallbacks(IPlayer1MoveActions)" />
    public interface IPlayer1MoveActions
    {
        /// <summary>
        /// Method invoked when associated input action "MoveInputOne" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveInputOne(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ActionInputOne" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnActionInputOne(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ChangeCamLeft" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnChangeCamLeft(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ChangeCamRight" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnChangeCamRight(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "Player2Move" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Player2MoveActions.AddCallbacks(IPlayer2MoveActions)" />
    /// <seealso cref="Player2MoveActions.RemoveCallbacks(IPlayer2MoveActions)" />
    public interface IPlayer2MoveActions
    {
        /// <summary>
        /// Method invoked when associated input action "MoveInputTwo" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveInputTwo(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "ActionInputTwo" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnActionInputTwo(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Mouse" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMouse(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "VooFantasma" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnVooFantasma(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GhostShow" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGhostShow(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "InComumInputs" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="InComumInputsActions.AddCallbacks(IInComumInputsActions)" />
    /// <seealso cref="InComumInputsActions.RemoveCallbacks(IInComumInputsActions)" />
    public interface IInComumInputsActions
    {
        /// <summary>
        /// Method invoked when associated input action "Close" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnClose(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "CheatInvulGhost" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCheatInvulGhost(InputAction.CallbackContext context);
    }
}
